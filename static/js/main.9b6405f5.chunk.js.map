{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/HomePage.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleTable.tsx","components/PeopleFilters.tsx","components/PeoplePage.tsx","utils/getSortedPeople.ts","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","HomePage","HomeRedirect","replace","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","useSearchParams","searchParams","pathname","slug","search","toString","cn","sex","name","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","PeopleTable","people","sort","get","order","useParams","handleSort","field","sortOrderIcon","map","born","died","mother","motherName","father","fatherName","centuryOptions","PeopleFilters","setSearchParams","query","centuries","getAll","type","placeholder","onChange","event","target","century","includes","filter","cen","length","PeoplePage","useState","setPeople","isError","setIsError","isLoading","setIsLoading","useEffect","usersServise","catch","finally","preparedPeople","useMemo","find","p","sortedPeople","some","toLowerCase","trim","String","Math","ceil","a","b","localeCompare","reverse","getSortedPeople","createRoot","document","getElementById","render","path","element","index"],"mappings":"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","file":"static/js/main.9b6405f5.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => {\n  return classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n};\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport './App.scss';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","import { Navigate } from 'react-router-dom';\n\nexport const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n\nexport const HomeRedirect = () => {\n  return <Navigate to=\"/\" replace />;\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        pathname: `/people/${person.slug}`,\n        search: searchParams.toString(),\n      }}\n      className={cn({ 'has-text-danger': person.sex === 'f' })}\n    >\n      {person.name || '-'}\n    </Link>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import cn from 'classnames';\nimport React from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport { PersonLink } from './PersonLink';\nimport { Person } from '../types';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n  const { slug } = useParams();\n\n  const handleSort = (field: string) => {\n    if (!order && sort === field) {\n      return {\n        sort: field,\n        order: 'desc',\n      };\n    }\n\n    if (order && sort === field) {\n      return {\n        sort: null,\n        order: null,\n      };\n    }\n\n    return {\n      sort: field,\n      order: null,\n    };\n  };\n\n  const sortOrderIcon = (field: string) => (\n    cn('fas', {\n      'fa-sort': sort !== `${field}`,\n      'fa-sort-up': sort === `${field}` && order !== 'desc',\n      'fa-sort-down': sort === `${field}` && order === 'desc',\n    })\n  );\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink params={handleSort('name')}>\n                <span className=\"icon\">\n                  <i className={sortOrderIcon('name')} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink params={handleSort('sex')}>\n                <span className=\"icon\">\n                  <i className={sortOrderIcon('sex')} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink params={handleSort('born')}>\n                <span className=\"icon\">\n                  <i className={sortOrderIcon('born')} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink params={handleSort('died')}>\n                <span className=\"icon\">\n                  <i className={sortOrderIcon('died')} />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            key={person.slug}\n            data-cy=\"person\"\n            className={cn({\n              'has-background-warning': slug === person.slug,\n            })}\n          >\n            <td>\n              <PersonLink person={person} />\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {person.mother\n                ? <PersonLink person={person.mother} />\n                : person.motherName || '-'}\n            </td>\n            <td>\n              {person.father\n                ? <PersonLink person={person.father} />\n                : person.fatherName || '-'}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nconst centuryOptions = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(getSearchWith(searchParams, {\n      query: event.target.value,\n    }));\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({ 'is-active': sex === '' })}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={classNames({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={classNames({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuryOptions.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                params={{\n                  centuries: centuries.includes(century)\n                    ? centuries.filter(cen => cen !== century)\n                    : [...centuries, century],\n                }}\n                className={classNames(\n                  'button mr-1',\n                  { 'is-info': centuries.includes(century) },\n                )}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames(\n                'button is-success',\n                { 'is-outlined': centuries.length },\n              )}\n              params={{ centuries: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{\n            centuries: [],\n            sex: null,\n            query: null,\n          }}\n          className=\"button is-link is-outlined is-fullwidth\"\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport * as usersServise from '../api';\nimport { Loader } from './Loader';\nimport { Person } from '../types';\nimport { PeopleTable } from './PeopleTable';\nimport { PeopleFilters } from './PeopleFilters';\nimport { getSortedPeople } from '../utils/getSortedPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [searchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    usersServise.getPeople()\n      .then(setPeople)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const preparedPeople = useMemo(() => {\n    return people.map(person => {\n      const mother = people.find(p => p.name === person.motherName) || null;\n      const father = people.find(p => p.name === person.fatherName) || null;\n\n      return { ...person, mother, father };\n    });\n  }, [people]);\n\n  const sortedPeople = useMemo(() => {\n    return getSortedPeople(\n      preparedPeople,\n      sex,\n      query,\n      centuries,\n      sort,\n      order,\n    );\n  }, [people, sex, query, centuries, sort, order]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!isError && !isLoading && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <>\n                    {isError && (\n                      <p\n                        data-cy=\"peopleLoadingError\"\n                        className=\"has-text-danger\"\n                      >\n                        Something went wrong\n                      </p>\n                    )}\n\n                    {people.length === 0 && (\n                      <p data-cy=\"noPeopleMessage\">\n                        There are no people on the server\n                      </p>\n                    )}\n\n                    {!isError && (\n                      <PeopleTable\n                        people={sortedPeople}\n                      />\n                    )}\n                  </>\n                )}\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\nexport const getSortedPeople = (\n  people: Person[],\n  sex: string | null,\n  query: string | null,\n  centuries: string[],\n  sort: string,\n  order: string,\n) => {\n  const sortedPeople = people\n    .filter(person => (\n      !query || [person.name, person.fatherName, person.motherName]\n        .some(name => (\n          name?.toLowerCase().includes(query?.trim().toLowerCase())\n        ))\n    ))\n    .filter(person => !sex || person.sex === sex)\n    .filter(person => !centuries.length\n      || centuries.includes(String(Math.ceil(person.born / 100))));\n\n  if (sort) {\n    sortedPeople.sort((a, b) => {\n      switch (sort) {\n        case 'name':\n        case 'sex':\n          return a[sort].localeCompare(b[sort]);\n\n        case 'born':\n        case 'died':\n          return a[sort] - b[sort];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return order === 'desc'\n    ? sortedPeople.reverse()\n    : sortedPeople;\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router, Route, Routes } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { HomePage, HomeRedirect } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"home\" element={<HomeRedirect />} />\n          <Route path=\"people\" element={<PeoplePage />}>\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}